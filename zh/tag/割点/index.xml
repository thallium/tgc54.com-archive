<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>割点 | Thallium54</title><link>https://tgc54.com/zh/tag/%E5%89%B2%E7%82%B9/</link><atom:link href="https://tgc54.com/zh/tag/%E5%89%B2%E7%82%B9/index.xml" rel="self" type="application/rss+xml"/><description>割点</description><generator>Wowchemy (https://wowchemy.com)</generator><language>zh-Hans</language><lastBuildDate>Tue, 06 Jul 2021 00:04:10 -0400</lastBuildDate><image><url>https://tgc54.com/media/icon_hu423b19687c85b10febae54029c442fbf_4135_512x512_fill_lanczos_center_3.png</url><title>割点</title><link>https://tgc54.com/zh/tag/%E5%89%B2%E7%82%B9/</link></image><item><title>关于Tarjan算法中的low link的另类定义与更新</title><link>https://tgc54.com/zh/post/tarjan-lowlink/</link><pubDate>Tue, 06 Jul 2021 00:04:10 -0400</pubDate><guid>https://tgc54.com/zh/post/tarjan-lowlink/</guid><description>&lt;p>Tarjan的论文中指出&lt;/p>
&lt;blockquote>
&lt;p>LOWLINK(v) is the smallest vertex which is in the same component as v and is reachable by traversing zero or more tree arcs followed by at most one [back edge] or [cross edge].&lt;/p>
&lt;/blockquote>
&lt;p>也就是说u的lowlink是在dfs树中u的子树中的节点经过&lt;strong>最多一条&lt;/strong>返祖边（back edge,也叫反向边）能到达最低的dfs序。所以在dfs的时候对于已访问和未访问的节点要用不同的更新：对于未访问的节点v我们用&lt;code>low[u]=min(low[u], low[v])&lt;/code>，对于访问过的节v点用&lt;code>low[u]=min(low[u], order[v])&lt;/code>。但这样也许有一点麻烦，增加了记忆难度，一不小心也可能写错。&lt;/p>
&lt;p>如果我们稍微修改一下定义，忽略返祖边的数量限制，得到的算法依然是对的！因为我们只关心lowlink是否是u的祖先，至于哪个祖先无所谓。所以这种定义在保证正确性的同时简化了代码，可以考虑使用。&lt;a href="https://github.com/thallium/acm-algorithm-template/blob/master/code/Graph/tarjan_SCC.cpp" target="_blank" rel="noopener">代码见此&lt;/a>&lt;/p></description></item></channel></rss>